package controllers;

import jakarta.annotation.Resource;
import jakarta.servlet.ServletConfig;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import modal.CartBeanItem;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.sql.DataSource;

import dao.ProductDAO;
import daoImpl.ProductDaoImpl;

/**
 * Servlet implementation class CartController
 */
@WebServlet(urlPatterns = { "/cart", "/cart*" })
public class CartController extends HttpServlet {
	private static final long serialVersionUID = 1L;

	@Resource(name = "jdbc/shopping")
	private DataSource dataSource;

	private ProductDAO productDAO;

	@Override
	public void init(ServletConfig config) throws ServletException {
		super.init(config);
		productDAO = new ProductDaoImpl(this.dataSource);
	}

	/**
	 * @see HttpServlet#HttpServlet()
	 */
	public CartController() {
		super();
		// TODO Auto-generated constructor stub
	}

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse
	 *      response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		// TODO Auto-generated method stub
		String action = request.getParameter("action") != null ? request.getParameter("action") : "";

		switch (action) {
		case "buy":
			doGetBuy(request, response);
			break;
		case "remove":
			doGetRemove(request, response);
			break;
		default:
			doGetDisplayCart(request, response);
			break;

		}

	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse
	 *      response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		// TODO Auto-generated method stub
		doGet(request, response);
	}

	/**
	 * Display Cart
	 * 
	 * @param request
	 * @param response
	 * @throws ServletException
	 * @throws IOException
	 */
	private void doGetDisplayCart(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		request.getRequestDispatcher("views/cart/index.jsp").forward(request, response);
	}

	/**
	 * Remove cart
	 * 
	 * @param request
	 * @param response
	 * @throws ServletException
	 * @throws IOException
	 */
	private void doGetRemove(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		HttpSession session = request.getSession();
		List<CartBeanItem> cart = (List<CartBeanItem>) session.getAttribute("cart");
		int index = isProductExisting(Integer.parseInt(request.getParameter("id")), cart);
		cart.remove(index);
		session.setAttribute("cart", cart);
		response.sendRedirect("cart");
	}

	/**
	 * Buy product
	 * 
	 * @param request
	 * @param response
	 * @throws ServletException
	 * @throws IOException
	 */
	private void doGetBuy(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {

		HttpSession session = request.getSession();
		List<CartBeanItem> cart = null;

		if (session.getAttribute("cart") == null) {
			cart = new ArrayList<CartBeanItem>();
		} else {
			cart = (List<CartBeanItem>) session.getAttribute("cart");
		}

		int index = isProductExisting(Integer.parseInt(request.getParameter("id")), cart);
		if (index == -1) {
			cart.add(new CartBeanItem(productDAO.getById(Integer.parseInt(request.getParameter("id"))), request.getParameter("quantity") != null ? Integer.parseInt(request.getParameter("quantity")) )));
		} else {
			int quantity = cart.get(index).getQuantity() + request.getParameter("quantity") ; 
		}
		session.setAttribute("cart", cart);

		response.sendRedirect("cart");
	}

	/**
	 * Check Product exist or not
	 * 
	 * @param id
	 * @param cart
	 * @return integer
	 */
	private int isProductExisting(int id, List<CartBeanItem> cart) {
		for (int i = 0; i < cart.size(); i++) {
			if (cart.get(i).getProduct().getId() == id) {
				return i;
			}
		}
		return -1;
	}
}
